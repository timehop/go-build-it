#!/bin/bash

set -e

# Config Template for s3cmd
read -d '' S3CFG_TMPL << CFG
[default]
access_key = AWS_ACCESS_KEY_ID
bucket_location = US
default_mime_type = binary/octet-stream
delete_removed = False
dry_run = False
encoding = UTF-8
encrypt = False
follow_symlinks = False
force = False
get_continue = False
gpg_command = None
gpg_decrypt = %(gpg_command)s -d --verbose --no-use-agent --batch --yes --passphrase-fd %(passphrase_fd)s -o %(output_file)s %(input_file)s
gpg_encrypt = %(gpg_command)s -c --verbose --no-use-agent --batch --yes --passphrase-fd %(passphrase_fd)s -o %(output_file)s %(input_file)s
gpg_passphrase =
guess_mime_type = True
host_base = s3.amazonaws.com
host_bucket = %(bucket)s.s3.amazonaws.com
human_readable_sizes = False
list_md5 = False
log_target_prefix =
preserve_attrs = True
progress_meter = True
proxy_host =
proxy_port = 0
recursive = False
recv_chunk = 4096
reduced_redundancy = False
secret_key = AWS_SECRET_ACCESS_KEY
send_chunk = 4096
skip_existing = False
socket_timeout = 300
urlencoding_mode = normal
use_https = False
verbosity = WARNING
CFG

GO_BUILD_DIR=/tmp/$TRAVIS_REPO_SLUG/timehop
GO_ZIP_DIR=/tmp/$TRAVIS_REPO_SLUG/timehop

check_installed() {
  hash $1 2>/dev/null
}

copy() {
  echo Copying $1 into $GO_BUILD_DIR
  mkdir -p $GO_BUILD_DIR
  cp -R $1 $GO_BUILD_DIR/
}

build() {
  echo Making $GO_BUILD_DIR dir
  mkdir -p $GO_BUILD_DIR


  echo Building $2 from $1
  go build -o $GO_BUILD_DIR/$2 $1
}

upload() {
  # Skip if not master
  echo "Currently on branch: $TRAVIS_BRANCH"
  if [[ "$TRAVIS_BRANCH" != "master" ]]; then
    if [[ $OVERRIDE_MASTER_CHECK != 1 ]]; then
        echo Not master branch. Skipping artifact build
        exit 0
    fi
    echo Override enabled, continuing build
  fi

  FILENAME=$APP_NAME-$TRAVIS_BUILD_NUMBER.tar.gz

  if [[ ! -e $GO_BUILD_DIR ]]; then
    echo Build dir does not exist: $GO_BUILD_DIR
    exit 1
  fi

  cd $GO_BUILD_DIR

  echo Artifact manifest from `pwd`
  find .

  echo Tar and gzipping
  tar cfz $FILENAME --exclude=.git --exclude=.gitignore * || { echo 'tar failed' ; exit 1; }

  S3CFG=$GO_BUILD_DIR/s3cfg

  echo Installing s3cmd
  sudo apt-get install s3cmd
  echo "$S3CFG_TMPL" | sed -e "s#AWS_ACCESS_KEY_ID#$AWS_ACCESS_KEY_ID#" -e "s#AWS_SECRET_ACCESS_KEY#$AWS_SECRET_ACCESS_KEY#" > $S3CFG

  BUILD_S3_URL=s3://$AWS_S3_BUCKET/$APP_NAME/$FILENAME

  echo Uploading $BUILD_S3_URL
  s3cmd put $GO_BUILD_DIR/$FILENAME $BUILD_S3_URL -c $S3CFG

  if [ ! -z $GITHUB_TOKEN ]; then
      go get github.com/timehop/goblet/...
      create-release -repo="$CIRCLE_PROJECT_REPONAME" -release="$TRAVIS_BUILD_NUMBER" -sha="$CIRCLE_SHA1"

      echo Making $GO_ZIP_DIR dir
      mkdir -p $GO_ZIP_DIR

      ZIP_FILENAME="$TRAVIS_BUILD_NUMBER.zip"
      ZIP_S3_URL="s3://$AWS_S3_BUCKET/$APP_NAME/$APP_NAME-$ZIP_FILENAME"

      echo Fetching $ZIP_FILENAME
      ZIPBALL_PATH="https://github.com/timehop/$APP_NAME/archive/$ZIP_FILENAME"
      curl -L -u $GITHUB_TOKEN:x-oauth-basic  "$ZIPBALL_PATH" > "/tmp/$ZIP_FILENAME"
      UNZIP_DIR="/tmp/uz/$APP_NAME"
      mkdir -p $UNZIP_DIR
      unzip -d  "$UNZIP_DIR" "/tmp/$ZIP_FILENAME"
      cd "$UNZIP_DIR/$APP_NAME-$TRAVIS_BUILD_NUMBER"
      zip -9 -r "$GO_ZIP_DIR/$ZIP_FILENAME" .

      echo "Uploading $ZIP_FILENAME from $GO_ZIP_DIR to $ZIP_S3_URL"
      s3cmd put "$GO_ZIP_DIR/$ZIP_FILENAME" "$ZIP_S3_URL" -c $S3CFG
  fi
}

if [ "$1" = "build" ]; then
  build $2 $3
elif [ "$1" = "copy" ]; then
  copy $2
elif [ "$1" = "upload" ]; then
  upload
fi
